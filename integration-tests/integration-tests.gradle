//local command
//eval $(docker-machine env default)

//Base Java Image

task buildJavaImage (type : Exec) {
    commandLine "docker", "build", "-t", "airhacks/java", "docker-base/java"
}

// Base Payara Images

task buildPayaraImage(type: Exec) {
    dependsOn buildJavaImage
    commandLine "docker", "build", "-t", "airhacks/payara", "docker-base/payara"
}

task buildPayaraConfiguredImage(type: Exec) {
    dependsOn buildPayaraImage
    commandLine "docker", "build", "-t", "airhacks/payara-configured", "docker-base/payara-configured"
}

task copyWarForPayaraIntegrationImage(type: Exec) {
    commandLine "cp", "../platform-examples/todo-example/todo-server-javaee/build/libs/todo-app.war", "docker-base/payara-integration"
}

task buildPayaraIntegrationImage(type: Exec) {
    dependsOn copyWarForPayaraIntegrationImage, buildPayaraConfiguredImage
    commandLine "docker", "rmi", "dolphin-platform/paraya-integration"
    commandLine "docker", "build", "-t", "dolphin-platform/paraya-integration", "docker-base/payara-integration"
}

task stopPayaraIntegrationImage(type: Exec) {
    commandLine "docker", "stop", "paraya-integration"
    ignoreExitValue true
}

task removePayaraIntegrationImage(type: Exec) {
    dependsOn stopPayaraIntegrationImage
    commandLine "docker", "rm", "paraya-integration"
    ignoreExitValue true
}

task runPayaraIntegrationImage(type: Exec) {
    dependsOn buildPayaraIntegrationImage, removePayaraIntegrationImage
    commandLine "docker", "run", "-d", "-p", "8282:8080", "--name", "paraya-integration", "dolphin-platform/paraya-integration"
}

task waitForPayaraIntegrationStarted(type: ExecWait) {
    dependsOn runPayaraIntegrationImage
    command "docker logs -f paraya-integration"
    directory projectDir.toString()
    ready '[AutoDeploy] Successfully autodeployed : '
}

task runPayaraIntegrationTests() {
    dependsOn waitForPayaraIntegrationStarted, removePayaraIntegrationImage
}

// Base TomEE Image

task buildTomEEImage(type: Exec) {
    dependsOn buildJavaImage
    commandLine "docker", "build", "-t", "airhacks/tomee", "docker-base/tomee"
}

task copyWarForTomEEIntegrationImage(type: Exec) {
    commandLine "cp", "../platform-examples/todo-example/todo-server-javaee/build/libs/todo-app.war", "docker-base/tomee-integration"
}

task buildTomEEIntegrationImage(type: Exec) {
    dependsOn copyWarForTomEEIntegrationImage, buildTomEEImage
    commandLine "docker", "rmi", "dolphin-platform/tomee-integration"
    commandLine "docker", "build", "-t", "dolphin-platform/tomee-integration", "docker-base/tomee-integration"
}

task stopTomEEIntegrationImage(type: Exec) {
    commandLine "docker", "stop", "tomee-integration"
    ignoreExitValue true
}

task removeTomEEIntegrationImage(type: Exec) {
    dependsOn stopTomEEIntegrationImage
    commandLine "docker", "rm", "tomee-integration"
    ignoreExitValue true
}

task runTomEEIntegrationImage(type: Exec) {
    dependsOn buildTomEEIntegrationImage, removeTomEEIntegrationImage
    commandLine "docker", "run", "-d", "-p", "8282:8080", "--name", "tomee-integration", "dolphin-platform/tomee-integration"
}

task waitForTomEEIntegrationStarted(type: ExecWait) {
    dependsOn runTomEEIntegrationImage
    command "docker logs -f tomee-integration"
    directory projectDir.toString()
    ready 'WildFly Full 10.0.0.Final (WildFly Core 2.0.10.Final) started'
}

task runTomEEIntegrationTests() {
    dependsOn waitForTomEEIntegrationStarted, removeTomEEIntegrationImage
}

// Base Wildfly Image

task buildWildflyImage(type: Exec) {
    dependsOn buildJavaImage
    commandLine "docker", "build", "-t", "airhacks/wildfly", "docker-base/wildfly"
}

task copyWarForWildflyIntegrationImage(type: Exec) {
    commandLine "cp", "../platform-examples/todo-example/todo-server-javaee/build/libs/todo-app.war", "docker-base/wildfly-integration"
}

task buildWildflyIntegrationImage(type: Exec) {
    dependsOn copyWarForWildflyIntegrationImage, buildWildflyImage
    commandLine "docker", "rmi", "dolphin-platform/wildfly-integration"
    commandLine "docker", "build", "-t", "dolphin-platform/wildfly-integration", "docker-base/wildfly-integration"
}

task stopWildflyIntegrationImage(type: Exec) {
    commandLine "docker", "stop", "wildfly-integration"
    ignoreExitValue true
}

task removeWildflyIntegrationImage(type: Exec) {
    dependsOn stopWildflyIntegrationImage
    commandLine "docker", "rm", "wildfly-integration"
    ignoreExitValue true
}

task runWildflyIntegrationImage(type: Exec) {
    dependsOn buildWildflyIntegrationImage, removeWildflyIntegrationImage
    commandLine "docker", "run", "-d", "-p", "8282:8080", "--name", "wildfly-integration", "dolphin-platform/wildfly-integration"
}

task waitForWildflyIntegrationStarted(type: ExecWait) {
    dependsOn runWildflyIntegrationImage
    command "docker logs -f wildfly-integration"
    directory projectDir.toString()
    ready 'WildFly Full 10.0.0.Final (WildFly Core 2.0.10.Final) started'
}

task runWildflyIntegrationTests() {
    dependsOn waitForWildflyIntegrationStarted, removeWildflyIntegrationImage
}